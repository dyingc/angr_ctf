# .gitignore for angr CTF
# Covers C, Assembly, Python and angr-specific files

# ============================================================================
# GENERATED BINARIES AND EXECUTABLES
# ============================================================================

# Generated binaries and executables
[0-9][0-9]_angr_*/[0-9][0-9]_angr_*

# All generated binaries in dist/
dist/*/[0-9][0-9]_*
dist/*/*_angr_*

# Object directories
obj/
obj/*/

# Compiled binaries (generic patterns)
*.exe
*.out
*.app
*.bin
*.elf

# ============================================================================
# C/C++ FILES
# ============================================================================

# Prerequisites
*.d

# Object files
*.o
*.ko
*.obj
*.elf

# Linker output
*.ilk
*.map
*.exp

# Precompiled Headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lo

# Shared objects (inc. Windows DLLs)
*.dll
*.so
*.so.*
*.dylib

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf

# Static analysis output
*.sarif

# ============================================================================
# ASSEMBLY FILES
# ============================================================================

# Assembled binaries
*.bin
*.hex
*.lst
*.map

# Assembler temporary files
*.tmp

# ============================================================================
# PYTHON FILES
# ============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.pyc
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
angr_env/
angr_ctf_env/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ============================================================================
# ANGR-SPECIFIC FILES
# ============================================================================

# angr analysis cache
.angr_cache/

# angr temporary files
*.angr

# angr pickled states
*.pickle
*.pkl

# angr CFG and other analysis outputs
*.cfg
*.ddg
*.cdg

# angr simulation outputs
*.trace

# angr project files
*.aproj

# ============================================================================
# DEVELOPMENT AND EDITOR FILES
# ============================================================================

# Vim
*.swp
*.swo
*~
.vimrc.local

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# VS Code
*.code-workspace

# PyCharm
.idea/
*.iml
*.ipr
*.iws

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

# ============================================================================
# SYSTEM FILES
# ============================================================================

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ============================================================================
# BUILD AND COMPILATION ARTIFACTS
# ============================================================================

# CMake
CMakeLists.txt.user
CMakeCache.txt
CMakeFiles/
CMakeScripts/
Testing/
Makefile
cmake_install.cmake
install_manifest.txt
compile_commands.json
CTestTestfile.cmake
_deps

# Make
*.mk
.make/

# Autotools
/autom4te.cache
/aclocal.m4
/compile
/configure
/depcomp
/install-sh
/missing
/stamp-h1
/config.log
/config.status
Makefile.in

# ============================================================================
# LOGS AND TEMPORARY FILES
# ============================================================================

# Log files
*.log
logs/
*.out

# Core dumps
core.*
*.core

# Temporary files
tmp/
temp/
.tmp/
.temp/

# Backup files
*.bak
*.backup
*.old
*.orig

# ============================================================================
# ANGR CTF SPECIFIC PATTERNS
# ============================================================================

# Generated challenge files with user-specific patterns
**/obj/*/
**/dist/*/

# Solution files (optional - uncomment if you don't want to track solutions)
# solution*.py
# solve*.py
# *_solution.py

# Challenge-specific temporary files
challenge_*
test_input*
*.input

# angr analysis reports
analysis_report*
*.report

# Performance profiling
*.prof
*.profile

# Memory dumps
*.dump
*.mem

# ============================================================================
# CUSTOM USER ADDITIONS
# ============================================================================

# Add any project-specific patterns below this line

# VS Code workspace settings
.clinerules
